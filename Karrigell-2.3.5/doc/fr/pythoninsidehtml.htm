<html>
<head>
<title>Python Inside HTML
</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="STYLESHEET" href="../doc.css">
</head>
<BODY bgcolor="#71B559" LINK="#FFFFCC" VLINK="#FFFFCC" LEFTMARGIN="0" TOPMARGIN="0">
<table cellpadding="0" cellspacing="0">
<tr>
<td class="side">&nbsp;</td>
<td>
    <table class="header" cellpadding="0" cellspacing="0">
    <tr>
        <td>
            <a href="../../index.html"><img src="../images/karrigell_skeudenn.png" border="0"></a>
        </td>
        <td class="headertext">
            <td class="headertext1">
                <center>
                <font size="+2"><b>Karrigell Documentation</b></font>
                <p>
                <table width="70%" cellpadding="0" cellspacing="0"><tr>
                <td class="info" align="left"><strong>Version 2.3.5</strong></td>
                <td class="info" align="right">19 05 07</td>
                </tr></table>
                </center>
            </td>
            <td class="headertext2">
                <a class="header" href="../en/pythoninsidehtml.htm">English</a>
            </td>
        </td>
    </tr>
    </table>
</td>
</tr>
<tr><td class="menu" valign="top"><a class="menu" href="front.htm">
1. Introduction
</a><br><a class="menu" href="install.htm">
2. Installation
</a><br><a class="menu" href="webserveroptions.htm">
3. Le serveur Web
</a><br><a class="menu" href="configuration.htm">
4. Options de configuration
</a><br><a class="menu" href="apache.htm">
5. Travailler avec Apache, LightTPD ou Xitami
</a><br><a class="menu" href="programming.htm">
6. Programmation
</a><br><a class="menu" href="debugging.htm">
7. Debogage
</a><br><a class="menu" href="pythonscripts.htm">
8. Scripts Python
</a><br><a class="menu" href="cgi.htm">
9. Scripts CGI
</a><br><a class="menu" href="karrigellservices.htm">
10. Services Karrigell
</a><br><span class="sel">
11. Python Inside HTML
</span><br><span class="sel">
&nbsp;&nbsp;<small>11.1 Variables Python</small></span><br><span class="sel">
&nbsp;&nbsp;<small>11.2 Chaînes de caractères à traduire</small></span><br><span class="sel">
&nbsp;&nbsp;<small>11.3 Indentation</small></span><br><span class="sel">
&nbsp;&nbsp;<small>11.4 PIH comme système de templates</small></span><br><span class="sel">
&nbsp;&nbsp;<small>11.5 Débogage</small></span><br><a class="menu" href="htmlinsidepython.htm">
12. HTML Inside Python
</a><br><a class="menu" href="htmltags.htm">
13. HTMLTags - génère du HTML en Python
</a><br><a class="menu" href="include.htm">
14. Inclure des documents
</a><br><a class="menu" href="sessions.htm">
15. Sessions
</a><br><a class="menu" href="authentication.htm">
16. Authentification
</a><br><a class="menu" href="internationalization.htm">
17. Traduction et Unicode
</a><br><a class="menu" href="namespace.htm">
18. Résumé des noms intégrés</a><br></td>
<td class="content">
<h1>11. Python Inside HTML</h1>
<p>Python Inside HTML se comporte de façon très proche des Active Server
Pages de Microsoft, des Java Server Pages et de  PHP : il s'agit à la base
d'un document HTML, dans lequel on insère des portions de code écrites dans
un langage de programmation - ici Python</p>
<p>Dans Python Inside HTML, ces portions de code sont séparées du code HTML
à l'intérieur de balises spéciales : &lt;% et %&gt;</p>
<p>Supposons que vous vouliez afficher la date courante, vous mêlerez du HTML
et du code Python de cette façon :
<dl><dd><pre class="verbatim">
La date courante est
&lt;% import time
print time.strftime("%d:%m:%y",time.localtime(time.time()))
%&gt;
</pre></dl>
<p>Avec un éditeur de texte, écrivez le code ci-dessus et sauvegardez-le sous
<span class="file">date.pih</span> dans votre <a href="webserveroptions.htm#root">
Répertoire Racine
</a>. Entrez <span class="url">http://localhost/date.pih</span> et voyez ce
qui se passe
<p>Vous aurez remarqué que le code à l'intérieur des balises <code>&lt;%</code>
et <code>%&gt;</code> est du code Python ordinaire, dans lequel vous pouvez
importer des modules, créer et instancier des classes, utiliser des variables,
lire ou écrire des fichiers, etc. L'accès à l'environnement HTTP, aux champs
de formulaires, aux exceptions définies par Karrigell se fait de la même façon
que pour <a href="pythonscripts.htm">les scripts Python</a>
<h2>11.1 Variables Python</h2>
<p>Si vous voulez seulement imprimer la valeur d'une variable, au lieu de
<code>&lt;% print var %&gt;</code> vous pouvez utiliser le raccourci
<code>&lt;%= var %&gt;</code> :
<dl><dd><pre class="verbatim">
  Le répertoire courant est &lt;%= os.getcwd() %>
</pre></dl>
Dans cet exemple vous remarquerez que vous n'êtes pas obligé d'importer
explicitement le module <code>os</code> : par commodité, il est déjà dans
l'espace de noms quand vous exécutez le script ; ainsi que deux autres
modules, <code>string</code> et <code>Cookie</code>, parce que vous en aurez
sûrement besoin dans beaucoup de scripts (mais bien sûr, si vous écrivez
explicitement <code>import string</code> votre script fonctionnera aussi bien)
</p>
<h2>11.2 Chaînes de caractères à traduire</h2>
Comme l'internationalisation est importante dans Karrigell, il existe un
raccourci pour les chaînes littérales ou les variables de type chaîne que
vous voudrez traduire selon les préférences de l'utilisateur : utilisez
<code>&lt;%_ chaine %&gt;</code>
<dl><dd><pre class="verbatim">
  &lt;% import time %&gt;
  &lt;%_ "Le répertoire courant est " %&gt; &lt;%= os.getcwd() %>
  &lt;%_ "Date courante " %&gt; &lt;%_ time.strftime("%a",time.localtime()) %&gt;
</pre></dl>
<p>Si vous avez préparé une traduction pour la chaîne <code>Le répertoire
courant est </code>, quand l'utilisateur appelle le script et que sa
référence de langue est l'anglais, son navigateur affichera <code>Current
directory is </code>
<p>Voir le support de Karrigell pour <a href="internationalization.htm">
l'internationalisation</a>
<h2>11.3 Indentation</h2>
<p>Le résultat du traitement d'un fichier PIH est du code Python : ce code
doit être indenté. Comme un script PIH est un mélange de HTML, dans lequel
l'indentation ne sert à rien d'autre qu'à la lisibilité, et de morceaux de
code Python, il se peut qu'il soit difficile de produire un code qui soit
à la fois lisible et correctement indenté
<h3>11.3.1 Bases</h3>
PythonInsideHTML suit des règles simples :
<ul>
<li>au début d'un script, l'indentation est nulle
<li>chaque partie est indentée selon l'indentation courante
<li>cette indentation courante peut être modifiée de deux façons :
<ol>
<li>quand un morceau de code Python se termine par deux points (:)
l'indentation de ce qui suit est incrémentée de 1
<li>pour décrémenter l'indentation utiliser <code>&lt;% end %&gt;</code>
</ol>
</ul>
<p>Un simple exemple sur des conditions :
<dl><dd><pre class="verbatim">
<TABLE cellspacing="5">
<tr>
<td>&nbsp;</td>
<td><pre class="verbatim"># indentation</td>
</tr>
<tr>
<td><pre class="verbatim">
&lt;% if heure<18: %>
    Bonjour
    &lt;% end>
&lt;% else: %>
    Bonsoir
&lt;% end>
&nbsp;Mesdames et Messieurs
</td>
<td><pre class="verbatim">
# 0 - suivante : 1
# 1
# 1 - suivante : 0
# 0 - suivante : 1
# 1
# 1 - suivante : 0
# 0
</td>
</tr>
</table>
</pre></dl>
<p>et une boucle <code>for</code> :
<dl><dd><pre class="verbatim">
<TABLE cellspacing="5">
<tr>
<td>&nbsp;</td>
<td><pre class="verbatim"># indentation</td>
</tr>
<tr>
<td><pre class="verbatim">
&lt;table border=1>
  &lt;tr>
    &lt;th>Nombre&lt;/th>
    &lt;th>Carré&lt;/th>
  &lt;/tr>
  &lt;% for i in range(10): %>
    &lt;tr>
      &lt;td>&lt;% print i %>&lt;/td>
      &lt;td>&lt;% print i**2 %>&lt;/td>
    &lt;/tr>
  &lt;% end %>
&lt;/table>
</td>
<td><pre class="verbatim">
# 0
# 0
# 0
# 0
# 0
# 0 - suivante : 1
# 1
# 1
# 1
# 1
# 1 - suivante 0
# 0
</td>
</tr>
</table>
</pre></dl>
<p>Sans cette balise <code>&lt;% end %&gt;</code> la balise
<code>&lt;/table&gt;</code> aurait été insérée dans la boucle
<p>Un dernier avec deux niveaux d'indentation
<dl><dd><pre class="verbatim">
<TABLE cellspacing="5">
<tr>
<td>&nbsp;</td>
<td><pre class="verbatim"># indentation</td>
</tr>
<tr>
<td><pre class="verbatim">
&lt;% for i in range(10): %>
    &lt;% if i % 2: %>
        &lt;td class="impair">&lt;%= i %>&lt;/td>
        &lt;% end %>
    &lt;% else: %>
        &lt;td class="pair">&lt;%= i %>&lt;/td>
        &lt;% end %>
    &lt;% end %>
Fin de table
</pre>
</td>
<td><pre class="verbatim">
# 0 - suivant : 1 (A)
# 1 - suivant : 2
# 2
# 2 - suivant : 1
# 1 - suivant : 2
# 2
# 2 - suivant : 1
# 1 - suivant : 0
# 0
</pre>
</td>
</tr>
</table>
</pre></dl>
<p>Noter qu'après la 1ère ligne il faut impérativement fermer la balise %>,
sinon après la deuxième l'indentation ne sera que de 1
<h3>11.3.3 La balise <code>&lt;indent&gt;</code></h3>
Pour du code plus long ou plus complexe, l'utilisation de <code>
&lt;% end %&gt;</code> peut se révéler lassante. Si vous voulez que certaines
parties de votre code soit indentées en Python comme elles le sont dans le
code PIH, insérez-le avec la balise <code>&lt;indent&gt;</code>
<p>Premier exemple :
<dl><dd><pre class="verbatim">
<TABLE cellspacing="5">
<tr>
<td>&nbsp;</td>
<td><pre class="verbatim"># indentation</td>
</tr>
<tr>
<td><pre class="verbatim">
&lt;indent&gt;
&lt;% if hour<18: %>
    Bonjour
&lt;% else: %>
    Bonsoir
Mesdames et Messieurs
&lt;/indent&gt;
</td>
<td><pre class="verbatim">
# 0
# 0
# 1
# 0
# 1
# 0
# 0
</td>
</tr>
</table>
</pre></dl>
<p>Le deuxième :
<dl><dd><pre class="verbatim">
<TABLE cellspacing="5">
<tr>
<td>&nbsp;</td>
<td><pre class="verbatim"># indentation</td>
</tr>
<tr>
<td><pre class="verbatim">
&lt;table border=1>
  &lt;tr>
    &lt;th>Nombre&lt;/th>
    &lt;th>Carré&lt;/th>
  &lt;/tr>
  &lt;indent&gt;
  &lt;% for i in range(10): %>
    &lt;tr>
    &lt;td>&lt;% print i %>&lt;/td>
    &lt;td>&lt;% print i**2 %>&lt;/td>
    &lt;/tr>
  &lt;/indent&gt;
&lt;/table>
</td>
<td><pre class="verbatim">
# 0
# 0
# 0
# 0
# 0
# 0
# 0 (A)
# 1
# 1
# 1
# 1
# suivante : 0
# 0
</td>
</tr>
</table>
</pre></dl>
<p>Sur la ligne notée (A) ci-dessus vous voyez que l'indentation de la ligne
est relative à celle de la balise <code>&lt;indent&gt;</code>
<p>Notez aussi qu'après une partie indentée (après la balise
<code>&lt;/indent&gt;</code>) l'indentation revient à zéro
<p>Un exemple avec des boucles imbriquées :
<dl><dd><pre class="verbatim">
&lt;indent&gt;
&lt;table border=1&gt;
&lt;% for i in ['h']+range(10): %&gt;
    &lt;tr&gt;
    &lt;% for j in ['h']+range(10): %&gt;
        &lt;% if i!='h' and j!='h': %&gt;
            &lt;td&gt;&lt;%= i*j %&gt;&lt;/td&gt;
        &lt;% elif i!='h': %&gt;
            &lt;th&gt;&lt;%= i %&gt;&lt;/th&gt;
        &lt;% elif j!='h': %&gt;
            &lt;th&gt;&lt;%= j %&gt;&lt;/th&gt;
        &lt;% else: %&gt;
            &lt;td&gt;*&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;/indent&gt;
</pre></dl>
<h2>11.4 PIH comme système de templates</h2>
Les scripts PIH scripts peuvent être utilisés en-dehors du serveur
Karrigell pour générer des pages HTML, ce qui en fait un "système de
templates"
<p>Par exemple, cette documentation HTML est produite à partir de 
scripts PIH. Le numéro de chapitre n'est pas fixe, mais inséré de cette
façon :
<dl><dd><pre class="verbatim">
&lt;h1>&lt;%= chapter %>. Python Inside HTML&lt;/h1>
</pre></dl>
<p>Pour produire du HTML à partir d'un script PIH script, servez-vous du
module <code>Template</code>, créez une instance de Script avec la fonction 
<code>getScript(<var>nomFichier</var>)</code>, puis appliquez-lui la
méthode <code>render(<var>espaceDeNoms</var>)</code>, en lui passant l'espace 
de noms dans lequel il trouvera les variables requises (en général <code>
globals()</code> ou <code>locals()</code>). <code>render</code> retourne une 
instance de Output, dont l'attribut <code>value</code> donne le résultat en 
HTML. Ici :
<p>
<dl><dd><pre class="verbatim">
import Template
entree=Template.getScript("pythoninsidehtml.pih")
chapter=5
sortieHtml=entree.render(globals()).value
</pre></dl>
<h2>11.5 Débogage</h2>
<br>A des fins de débogage lancez le script <code>PIHapp.py</code>. C'est une petite application qui
montre comment les fichiers PIH sont traduits en scripts Python. Le résultat du script peut être
sauvegardé dans un fichier HTML et montré dans un navigateur, s'il n'appelle pas de variable
externe. La syntaxe est colorée
</body>
</html>
</td>
</tr></table>