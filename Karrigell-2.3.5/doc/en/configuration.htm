<html>
<head>
<title>Configuration options
</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="STYLESHEET" href="../doc.css">
</head>
<BODY bgcolor="#71B559" LINK="#FFFFCC" VLINK="#FFFFCC" LEFTMARGIN="0" TOPMARGIN="0">
<table cellpadding="0" cellspacing="0">
<tr>
<td class="side">&nbsp;</td>
<td>
    <table class="header" cellpadding="0" cellspacing="0">
    <tr>
        <td>
            <a href="../../index.html"><img src="../images/karrigell_skeudenn.png" border="0"></a>
        </td>
        <td class="headertext">
            <td class="headertext1">
                <center>
                <font size="+2"><b>Karrigell Documentation</b></font>
                <p>
                <table width="70%" cellpadding="0" cellspacing="0"><tr>
                <td class="info" align="left"><strong>Version 2.3.5</strong></td>
                <td class="info" align="right">19 05 07</td>
                </tr></table>
                </center>
            </td>
            <td class="headertext2">
                <a class="header" href="../fr/configuration.htm">Fran&ccedil;ais</a>
            </td>
        </td>
    </tr>
    </table>
</td>
</tr>
<tr><td class="menu" valign="top"><a class="menu" href="front.htm">
1. Introduction
</a><br><a class="menu" href="install.htm">
2. Installing Karrigell
</a><br><a class="menu" href="webserveroptions.htm">
3. The Web server
</a><br><span class="sel">
4. Configuration options
</span><br><a class="menu" href="apache.htm">
5. Working with Apache, LightTPD or Xitami
</a><br><a class="menu" href="programming.htm">
6. Programming
</a><br><a class="menu" href="debugging.htm">
7. Debugging
</a><br><a class="menu" href="pythonscripts.htm">
8. Python scripts
</a><br><a class="menu" href="cgi.htm">
9. CGI scripts
</a><br><a class="menu" href="karrigellservices.htm">
10. Karrigell Services
</a><br><a class="menu" href="pythoninsidehtml.htm">
11. Python Inside HTML
</a><br><a class="menu" href="htmlinsidepython.htm">
12. HTML Inside Python
</a><br><a class="menu" href="htmltags.htm">
13. HTMLTags - generate HTML in Python
</a><br><a class="menu" href="include.htm">
14. Including documents
</a><br><a class="menu" href="sessions.htm">
15. Sessions
</a><br><a class="menu" href="authentication.htm">
16. Authentication
</a><br><a class="menu" href="internationalization.htm">
17. Translation and Unicode
</a><br><a class="menu" href="namespace.htm">
18. Summary of built-in names</a><br></td>
<td class="content">
<script src="../pf_test.js"></script>
<h1>4. Configuration options</h1>
Configuration options are set in a configuration file. By default it is the <span class="file">
Karrigell.ini</span> file in
the server directory. You can set it to a different file in the command line
<p>A variable <code>base</code> is set by Karrigell before loading the configuration file, its
value is the server directory. See example of use with <code>%(base)s/</code> in the default
<span class="file">Karrigell.ini</span> file
<p>The configuration file is split into several sections :
<p>
<code>[Directories]</code>
<blockquote><code>root</code>
    <blockquote>
    Set the <code>root</code> option to the full name of the Root Directory, the one from which
    you'll want to serve files. On installation it is not set, the default is the folder 
    <code>webapps</code> in the Server Directory
    </blockquote>
</blockquote>
<blockquote><code>cgi</code>
    <blockquote>
    The list of directories for <a href="cgi.htm">cgi scripts</a>
    <br>Defaults to <code>webapps/cgi-bin</code> in the Server Directory
    </blockquote>
</blockquote>
<blockquote><code>protected</code>
    <blockquote>
    a list of protected directories ; for each script in these directories 
    a script called <CODE>AuthentScript.py</CODE> will be automatically executed first. 
    This script <CODE>AuthentScript.py</CODE> must be written by the administrator and
    put in the directory
    <br>By default, only the directory <code>admin</code> is protected. Use
    ";" to add other ones
    </blockquote>
</blockquote>
<blockquote><code>allow_directory_listing</code>
    <blockquote>
    If a url matches a directory with no index file in it, determine who can
    read the directory content :
    <ul>
         <li>all = all users
         <li>none = no user
    </ul>
    <br>Defaults to "none"
    </blockquote>
</blockquote>
<blockquote><code>hide_extensions</code>
    <blockquote>
    A list of file extensions that will be hidden (return error 403)
    </blockquote>
</blockquote>
<blockquote><code>hide_paths</code>
    <blockquote>
    A list of regular expression patterns that will be matched to url paths ; if a
    match succeeds then the server will return error 403
    <br>This can be used to forbid access to a set of directories. For instance if
    you have a version control that creates directories named <code>cvs</code> you
    can forbid access to them with this line :
    <br><code>hide_paths = .*/cvs/.*
    </blockquote>
</blockquote>
<blockquote><code>loggingFile</code>
    <blockquote>
    The name for a logging file. If not set, no logging is performed
    </blockquote>
</blockquote>
<blockquote><code>loggingParameters</code>
    <blockquote>
    Parameters for logging handlers, refer to Python documentation, module <CODE>logging</CODE>
    <br>The following are for RotatingFileHandler: 
    <CODE>mode="a", maxBytes=1000000, backupCount=10</CODE>
    </blockquote>
</blockquote>
<code>[Applications]</code>
<BLOCKQUOTE>
Maps file extensions to MIME types ; as far as I know this works with Netscape, but Internet
Explorer overrides these settings
</BLOCKQUOTE>
<code>[Alias]</code>
<BLOCKQUOTE>
You can associate an alias to a path on the file system. For instance, if you create this alias
:
<blockquote>
<code>scripts=
<script>
if (pf == 'w')
{ document.write('c:\\My&nbsp;Documents\\Karrigell&nbsp;scripts') }
else
{ document.write('home/myprogs/Karrigell_scripts') }
</script>
</code>
</blockquote>
then the url <span class="url">
htpp://localhost/scripts/index.htm</span> will serve the file <span class="file">
<script>
if (pf == 'w')
{ document.write('c:\\My&nbsp;Documents\\Karrigell&nbsp;scripts\\index.html') }
else
{ document.write('home/myprogs/Karrigell_scripts/index.html') }
</script>
</span>
</BLOCKQUOTE>
<p>
<code>[Server]</code>
<BLOCKQUOTE>
<code>port</code>
    <BLOCKQUOTE>
    Set the <code>port</code> option to change the HTTP port (default 80)
    </BLOCKQUOTE>
</BLOCKQUOTE>
<BLOCKQUOTE>
<code>reload_modules</code>
    <BLOCKQUOTE>
    If set to 1, all imported modules are reset at every <code>import</code>, 
    so you don't have to restart the server when you change something in an 
    imported script. Defaults to 1
    </BLOCKQUOTE>
</BLOCKQUOTE>
<BLOCKQUOTE>
<code>debug</code>
    <BLOCKQUOTE>
    <CODE>debug</CODE> indicates if you want the "Debug" button to appear on
    the error pages. You might want to set it to 0 for security reasons. 
    Default is 1 (the button is shown)
    </BLOCKQUOTE>
</BLOCKQUOTE>
<BLOCKQUOTE>
<code>silent</code>
    <BLOCKQUOTE>
    If the <code>silent</code> option is set to 1, nothing is printed on the console window
    </BLOCKQUOTE>
</BLOCKQUOTE>
<BLOCKQUOTE>
<code>gzip</code>
    <BLOCKQUOTE>
    If the <code>gzip</code> option is set to 1, and the user agent supports gzip encoding 
    (most browsers do), the server compresses the data sent to the user agent. This reduces
    the use of the network, but slows down the server a little
    </BLOCKQUOTE>
</BLOCKQUOTE>
<BLOCKQUOTE>
<code>global</code>
    <BLOCKQUOTE>
    In the <code>global</code> option, specify the path to the modules which must be imported in
    every script run by Karrigell. If you have a line like
    <blockquote><pre>global=%(base)s/myScript.py;%(base)s/myScript1.py</blockquote>
    both modules <span class="file">myScript</span> and <span class="file">myScript1</span> will
    be available in the namespace of all scripts
    </BLOCKQUOTE>
</BLOCKQUOTE>
<BLOCKQUOTE>
<code>ignore</code>
    <BLOCKQUOTE>
    A list of urls to ignore if not found (return the HTTP code 204 instead of 404). Used
    by default to ignore the url <CODE>/favicon.ico</CODE>, searched by many browsers
    </BLOCKQUOTE>
</BLOCKQUOTE>
<code>[Translation]</code>
<blockquote>
Specifies the language used in the application, regardless of the options
defined in the web browser. Set <code>lang=default</code> if you don't want any
translation, <code>lang=en</code> if you want to use translations in English, etc
</blockquote>
<p>
<code>[VirtualHost name]</code>
<blockquote>
Karrigell supports the notion of virtual hosts, allowing to serve different hosts
with different names on the same server
<p>To specify a virtual host you add a line like this in the configuration file :
<blockquote><code>[VirtualHost name]</code></blockquote>
where <CODE>name</CODE> is the host name (like <CODE>www.test.org</CODE>)
<p>In this section, you have to specify a directory from which the serve will 
serve the requests to this specific host : 
<BLOCKQUOTE>
<code>root = /web/mydir</code>
</BLOCKQUOTE>
</blockquote>
<p><a name="note"><small>(1) you can also use an alternative built-in web server based on the
modules <code>SocketServer</code>, <code>BaseHTTPServer</code> and 
<CODE>SimpleHTTPServer</CODE> module in the standard Python distribution : run
<code>python Karrigell_SocketServer.py</code>
<p>If you prefer a threaded server use
<code>python Karrigell_ThreadedSocketServer.py</code>
</small>
</body>
</html>
</td>
</tr></table>