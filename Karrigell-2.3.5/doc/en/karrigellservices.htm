<html>
<head>
<title>Karrigell Services
</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="STYLESHEET" href="../doc.css">
</head>
<BODY bgcolor="#71B559" LINK="#FFFFCC" VLINK="#FFFFCC" LEFTMARGIN="0" TOPMARGIN="0">
<table cellpadding="0" cellspacing="0">
<tr>
<td class="side">&nbsp;</td>
<td>
    <table class="header" cellpadding="0" cellspacing="0">
    <tr>
        <td>
            <a href="../../index.html"><img src="../images/karrigell_skeudenn.png" border="0"></a>
        </td>
        <td class="headertext">
            <td class="headertext1">
                <center>
                <font size="+2"><b>Karrigell Documentation</b></font>
                <p>
                <table width="70%" cellpadding="0" cellspacing="0"><tr>
                <td class="info" align="left"><strong>Version 2.3.5</strong></td>
                <td class="info" align="right">19 05 07</td>
                </tr></table>
                </center>
            </td>
            <td class="headertext2">
                <a class="header" href="../fr/karrigellservices.htm">Fran&ccedil;ais</a>
            </td>
        </td>
    </tr>
    </table>
</td>
</tr>
<tr><td class="menu" valign="top"><a class="menu" href="front.htm">
1. Introduction
</a><br><a class="menu" href="install.htm">
2. Installing Karrigell
</a><br><a class="menu" href="webserveroptions.htm">
3. The Web server
</a><br><a class="menu" href="configuration.htm">
4. Configuration options
</a><br><a class="menu" href="apache.htm">
5. Working with Apache, LightTPD or Xitami
</a><br><a class="menu" href="programming.htm">
6. Programming
</a><br><a class="menu" href="debugging.htm">
7. Debugging
</a><br><a class="menu" href="pythonscripts.htm">
8. Python scripts
</a><br><a class="menu" href="cgi.htm">
9. CGI scripts
</a><br><span class="sel">
10. Karrigell Services
</span><br><span class="sel">
&nbsp;&nbsp;<small>10.1 Syntax</small></span><br><span class="sel">
&nbsp;&nbsp;<small>10.2 Smart urls</small></span><br><a class="menu" href="pythoninsidehtml.htm">
11. Python Inside HTML
</a><br><a class="menu" href="htmlinsidepython.htm">
12. HTML Inside Python
</a><br><a class="menu" href="htmltags.htm">
13. HTMLTags - generate HTML in Python
</a><br><a class="menu" href="include.htm">
14. Including documents
</a><br><a class="menu" href="sessions.htm">
15. Sessions
</a><br><a class="menu" href="authentication.htm">
16. Authentication
</a><br><a class="menu" href="internationalization.htm">
17. Translation and Unicode
</a><br><a class="menu" href="namespace.htm">
18. Summary of built-in names</a><br></td>
<td class="content">
<h1>10. Karrigell Services</h1>
<h2>10.1 Syntax</h2>
<p>"Karrigell Services" are Python scripts which can handle several URLs, so that
a complete service with different HTML pages can be created with just one script
<p>To achieve this, the functions in a Karrigell service match a URL : the
function <code>foo()</code> in the script <code>dummy.ks</code> is called by the URL
<span class="url">dummy.ks/foo</span>
<p>To call the method <code>foo(arg1,arg2)</code> the URL must be like 
<span class="url">dummy.ks/foo?arg1=val1&arg2=val2</span> or called by a form with 
fields <code>arg1</code> and <code>arg2</code>
<p>If no function is specified, Karrigell searches for a function called 
<code>index()</code> with no argument
<p>Note that for security and readability reasons, only the functions explicitely 
defined in the ks script, and whose definition starts at the column 0 in the source 
code, can be called
<p>If you need to define functions inside the script but don't want them to be
called by a url, prefix them by an underscore (_)
<p>
<dl><dd><pre class="verbatim">
def _private(value):
   """Private function - can't be called from the outside"""
   return value+1
</pre>
</dl>
<p>To "jump" from one function to another, just specify the function name in a link or 
a form action :
<p>
<dl><dd><pre class="verbatim">
def index():
   print '&lt;a href="foo?name=bar"&gt;go to foo&lt;/a&gt;'
def foo(name):
   print '&lt;IMG SRC="../picture.jpg"&gt;'
   print name
</pre>
</dl>
<p>Notice the first line in the <code>foo()</code> function : because of URL resolution 
methods, the relative URL for files or scripts in the <b>same</b> directory as a ks script 
must be prefixed by "../"
<p>All the HTTP environment, form fields, custom exceptions, functions for authentication,
session handling etc. are the same as in Python scripts
<p>Here is an example of a simple Karrigell Service :
<p>
<dl><dd><pre class="verbatim">
so = Session()
if not hasattr(so, 'x'):
    so.x = 0
def index():
    print "x = %s" %so.x
    print '&lt;br&gt;&lt;a href="increment"&gt;Increment&lt;/a&gt;'
    print '&lt;br&gt;&lt;a href="decrement"&gt;Decrement&lt;/a&gt;'
    print '&lt;br&gt;&lt;a href="reset"&gt;Reset&lt;/a&gt;'
    
def increment():
    so.x = _private(so.x)
    raise HTTP_REDIRECTION,"index"
def decrement():
    so.x -= 1
    raise HTTP_REDIRECTION,"index"
def reset():
    so.x = 0
    raise HTTP_REDIRECTION,"index"
def _private(x):
    """The function name begins with _ : internal function, 
    can't be call by a url"""
    return x+1
</pre>
</dl>
<h2>10.2 Smart urls</h2>
For some uses it may be useful to access Karrigell Services with urls that specify 
additional parameters. For instance, the url <CODE>htpp://path/service.ks/function/foo/bar?name=smith</CODE>
would call the function with 'foo' and 'bar' as parameters
<p>They can be found in the script in an attribute of <CODE>THIS</CODE> called <CODE>subpath</CODE>.
In the example above, it would be the list <CODE>['foo','bar']</CODE>
<p>
<dl><dd><pre class="verbatim">
def function(name):
   print 'subpath ',THIS.subpath
   print name
</pre>
</dl>
<p>A problem with these "smart urls" is that if you have to write a link, or use
<CODE>Include()</CODE> or redirect to a relative url, you must give the right url 
to the browser, that is, prepend the right number of '../' before the target url
<p>This number is defined by the length of the <CODE>subpath</CODE> attribute : if you
want to write a link in the function above you'd have to write
<p>
<dl><dd><pre class="verbatim">
def function(name):
   print 'subpath ',THIS.subpath
   print name
   print '&lt;a href=%slogin&gt;Login&lt;/a&gt;' %('../'*len(THIS.subpath))
</pre>
</dl>
or with a shortcut attribute of <CODE>THIS</CODE> called <CODE>up</CODE> :
<p>
<dl><dd><pre class="verbatim">
def function(name):
   print 'subpath ',THIS.subpath
   print name
   print '&lt;a href=%slogin&gt;Login&lt;/a&gt;' %THIS.up
</pre>
</dl>
</td>
</tr></table>