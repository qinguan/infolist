<HTML><HEAD><TITLE>Karrigell</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<LINK href="../doc/doc.css" rel=STYLESHEET>
</HEAD>
<a href="../../index.html" target="_parent"><img src="../../doc/images/karrigell_skeudenn.png" border="0"></a>
<h2>快速Karrigell实例学习</h2>


	<dl class="tour">
		<dt><a href="hello.py" target="exec">hello.py</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/hello.py" target="source"><img src="view.gif" border="0"
		text="See source"></a></dt>
<dd>
直接使用Python脚本输出 "Hello Karrigell !"
</dd>
	</dl>
    
    

	<dl class="tour">
		<dt><a href="hello1.py" target="exec">hello1.py</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/hello1.py" target="source"><img src="view.gif" border="0"
		text="See source"></a></dt>
<dd>同上,不过增加"text/plain"内容类型说明
</dd>
	</dl>

	<dl class="tour">
		<dt><a href="test.pih" target="exec">test.pih</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/test.pih" target="source"><img src="view.gif" border="0"
		alt="See source"></a></dt>
<dd>基本的"Python内嵌HTML脚本";输出HTTP 头信息,名称空间,及对应的值,一个矩阵计算
</dd>
	</dl>
	<dl class="tour">
		<dt><a href="test.hip" target="exec">test.hip</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/test.hip" target="source"><img src="view.gif" border="0"
		alt="See source"></a></dt>
    <dd>基本的"HTML内嵌Python脚本";输出HYYP头信息,cookies,一些计算
    </dd>
	</dl>

	<dl class="tour">
		<dt><a href="ksTest.ks" target="exec">ksTest.ks</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/ksTest.ks" target="source"><img src="view.gif" border="0"
		alt="See source"></a></dt>
		<dd>单页实现的完整的"Karrigell 服务"</dd>
	</dl>

	<dl class="tour">
		<dt><a href="cheetahTest.py" target="exec">cheetahTest.py</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/cheetahTest.py" target="source"><img src="view.gif" border="0"
		alt="See source"></a></dt>
<dd>在模板系统世界中,最流行的 Cheetah 引擎已经内嵌支持.
此例展示如何在Karrigell中使用:
    创建Py脚本来定义数据,然后 Include() 便会将数值透过模块文件输出
<code>cheetahTest.tmpl</code>
<a href="../../debugger/fileShowZh.pih?name=demo/cheetahTest.tmpl" target="source">
<img src="view.gif" border="0" alt="See source">
</dd>
	</dl>
    <!-- class="tour"-->

	<dl class="tour">
		<dt><a href="globalTest.py" target="exec">globalTest.py</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/globalTest.py" target="source"><img src="view.gif" border="0"
		text="See source"></a></dt>
<dd>运用"global" 模块,调用 <code>myScript</code>, 在所有脚本中可行
(前题是在配置文件中有声明:

 )</dd>
	</dl>	<dl class="tour">
		<dt><a href="myForm.htm" target="exec">myForm.htm</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/myForm.htm" target="source"><img src="view.gif" border="0"
		alt="See source"></a></dt>
<dd>从HTML表单向Python脚本<code>myScript.py</code><a href=
"../debugger/fileShowZh.pih?name=demo/myScript.py" target="source"><img src="view.gif" border="0" alt=
"See source"></a>提交 , 打印输入的值
</dd>
	</dl>	<dl class="tour">
		<dt><a href="fileUpload.html" target="exec">fileUpload.html</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/fileUpload.html" target="source"><img src="view.gif" border="0"
		alt="See source"></a></dt>
<dd>从HTML表单向Python脚本<code>fileUpload.py</code><a href=
"../../debugger/fileShowZh.pih?name=demo/fileUpload.py" target="source"><img src="view.gif" border="0" alt=
"See source"></a>提交, 展示如何获得上传文件的句柄

</dd>
	</dl>	<dl class="tour">
		<dt><a href="includeDemo.py" target="exec">includeDemo.py</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/includeDemo.py" target="source"><img src="view.gif" border=
		"0" alt="See source"></a></dt>
<dd>展示如何使用Include() 方法. 
包含了脚本:
    <code>footer.py</code>
<a href="../../debugger/fileShowZh.pih?name=demo/footer.py" target="source">
<img src="view.gif" border="0" alt="See source"></a> 进一步嵌套包含:
<code>includedFooter.py</code>
<a href="../../debugger/fileShowZh.pih?name=demo/includedFooter.py" target="source">
<img src="view.gif" border="0" alt="See source"></a>. 
变量 <code>THIS</code> 在所有脚本中变动.
</dd>
	</dl>
	<dl class="tour">
		<dt><a href="htmlTagsTemplateTest.py" target="exec">htmlTagsTemplateTest.py</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/htmlTagsTemplateTest.py" target="source"><img src="view.gif" border=
		"0" alt="See source"></a></dt>
<dd>HTMLTags 是用以从Py 脚本生成HTML代码的实用模板. 
本例将<code>htmlTagsTemplate.py</code>
<a href="../../debugger/fileShowZh.pih?name=demo/htmlTagsTemplate.py" target="source">
<img src="view.gif" border="0" alt="See source"></a>的输出作为模板,<br>
以参数<code>clients</code> 与 <code>title</code>, 
作中介,通过方法 Include() 组合输出完整的页面.
</dd>
	</dl>

	<dl class="tour">
		<dt><a href="authenticationTest.pih" target="exec">authenticationTest.pih</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/authenticationTest.pih" target="source"><img src="view.gif"
		border="0" alt="See source"></a></dt>

<dd>展示如何通过一个简单的方法使用认证支持; 
提示:进入的合法回答是"holden" 与 "caulfield"
</dd>

	</dl>
    
	<dl class="tour">
		<dt><a href="redirect.py" target="exec">redirect.py</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/redirect.py" target="source"><img src="view.gif" border="0"
		alt="See source"></a></dt>
<dd>重定向到另一地址(在此,是导向中国Python用户组的Wiki 页面...)
</dd>
	</dl>

	<dl class="tour">
		<dt><a href="scriptErrorTest.pih" target="exec">scriptErrorTest.pih</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/scriptErrorTest.pih" target="source"><img src="view.gif"
		border="0" alt="See source"></a></dt>
<dd>有值错误的脚本,展示Karrigell 是如何输出错误提示的.
"Debug" 按钮引导访问debugger, 综合展示源代码出错位置和当前所有环境变量状况.
还可参考:
<a href="frame_errorTour.htm" target="_top">其它错误</a>
</dd>
	</dl>
	<dl class="tour">
		<dt><a href="scriptEndTest.py" target="exec">scriptEndTest.py</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/scriptEndTest.py" target="source"><img src="view.gif"
		border="0" alt="See source"></a></dt>
<dd>使用 SCRIPT_END 约定异常,令脚本中断执行
(在你怀疑有问题的代码行前)</dd>
	</dl>	<dl class="tour">
		<dt><a href="tabsDemo.pih" target="exec">tabsDemo.pih</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/tabsDemo.pih" target="source"><img src="view.gif" border=
		"0" alt="See source"></a></dt>
<dd>展示水平的菜单标签实现:运用自动转换脚本
<a href="../../debugger/fileShowZh.pih?name=demo/k_tabs.hip" target="source">k_tabs.hip<img src="view.gif" border=
		"0" alt="See source"></a>和CSS配合实现

</dd>
	</dl>

	<dl class="tour">
		<dt><a href="sessionTestForm.htm" target="exec">sessionTestForm.htm</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/sessionTestForm.htm" target="source"><img src="view.gif"
		border="0" alt="See source"></a></dt>
<dd>HTML 表单提交的数据通过session机制保存下来.
脚本<code>sessionTestBegin.pih</code><a href=
"../../debugger/fileShowZh.pih?name=demo/sessionTestBegin.pih" target="source"><img src="view.gif" border=
"0" alt="See source"></a>展示初始获取了什么值. 
紧接着的脚本<code>sessionTestFollow.pih</code><a href=
"../../debugger/fileShowZh.pih?name=demo/sessionTestFollow.pih" target="source"><img src="view.gif" border=
"0" alt="See source"></a>展示从对话容器对象中再次取得值
</dd>
	</dl>

	<dl class="tour">
		<dt><a href="thisTest.pih" target="exec">thisTest.pih</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/thisTest.pih" target="source"><img src="view.gif"
		border="0" alt="See source"></a></dt>
<dd>展示对象<code>THIS</code>的各种属性值
		</dd>
	</dl>
	<dl class="tour">
		<dt><a href="requestHandlerTest.pih" target="exec">requestHandlerTest.pih</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/requestHandlerTest.pih" target="source"><img src="view.gif"
		border="0" alt="See source"></a></dt>
<dd>展示对象
<code>REQUEST_HANDLER</code>
的各种属性值
</dd>
	</dl>

	<dl class="tour">
		<dt><a href="importTest.hip" target="exec">importTest.hip</a>
		<a href="../../debugger/fileShowZh.pih?name=demo/importTest.hip" target="source"><img src="view.gif" border=
		"0" alt="See source"></a></dt>
<dd>仅仅引用了另一个脚本, <code>importTest.py</code><a href=
"../../debugger/fileShowZh.pih?name=demo/importTest.py" target="source"><img src="view.gif" border="0" alt=
"See source"></a> 就可以从中获取值并打印.
<i>值名只能是ASII的</i>
若<code>debug</code> 参数是设为1的 (在配置文件<code>Karrigell.ini</code>), 
值在importTest.py 中变更值后,重新载入 importTest.pih 也将获得新值. 

如果<code>debug</code>没有设置, 这样的修改不会起作用,
<br>除非整个服务重启,再次加载文件时才会变更.
</dd>
	</dl>




